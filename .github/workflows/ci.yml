name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  test:
    name: Unit tests (Poetry)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11"]  # add "3.10" if you want

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        run: pipx install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install deps (with dev)
        run: poetry install --no-interaction --no-ansi

      - name: Run tests
        env:
          # Provide safe/dummy envs for tests; real secrets live in Railway
          TESLA_EMAIL: ci@example.com
          DATABASE_URL: postgresql://user:pass@localhost:5432/testdb
        run: poetry run pytest --cov=dashboard --cov-report=xml --cov-report=term-missing

      # Optional: linting
      - name: Ruff lint
        if: always()
        run: poetry run ruff check src tests

      # Optional: mypy
      - name: Type check
        if: always()
        run: poetry run mypy src || true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
